[
    {
        "id": "7992d3bc94879325",
        "type": "tab",
        "label": "Filtered CSV_Simulation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c7d424b7c80c4342",
        "type": "function",
        "z": "7992d3bc94879325",
        "name": "Store Incoming Messages",
        "func": "let messages = flow.get('iotMessages') || [];\nmessages.push(msg.payload);\nflow.set('iotMessages', messages);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 240,
        "wires": [
            [
                "3523689e87c3dbd4"
            ]
        ]
    },
    {
        "id": "3523689e87c3dbd4",
        "type": "trigger",
        "z": "7992d3bc94879325",
        "name": "Start Timer",
        "op1": "",
        "op2": "triggered",
        "op1type": "nul",
        "op2type": "str",
        "duration": "15",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 570,
        "y": 240,
        "wires": [
            [
                "ed442fb89d4f5368"
            ]
        ]
    },
    {
        "id": "ed442fb89d4f5368",
        "type": "function",
        "z": "7992d3bc94879325",
        "name": "Process Stored Messages",
        "func": "let messages = flow.get('iotMessages') || [];\n\n// Ensure that only the messages are passed, not the \"triggered\" string\nmsg.payload = messages;\n\n// Check if messages exist and are passed correctly\nif (messages.length === 0) {\n    node.warn(\"No messages found in storage.\");\n}\n\nmsg.topic = \"messages\";  // Set msg.topic to identify this part of the join\nflow.set('iotMessages', []);  // Clear the stored messages after processing\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 240,
        "wires": [
            [
                "b6a78f7b38eca4b9",
                "93a063d77579e712"
            ]
        ]
    },
    {
        "id": "722de693c9ff157a",
        "type": "function",
        "z": "7992d3bc94879325",
        "name": "Process Selected Keys",
        "func": "msg.selectedKeys = msg.payload;\nmsg.topic = \"selectedKeys\";  // Set msg.topic to identify this part of the join\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 620,
        "wires": [
            [
                "b6a78f7b38eca4b9",
                "7a4dfe4ae6467135"
            ]
        ]
    },
    {
        "id": "b6a78f7b38eca4b9",
        "type": "join",
        "z": "7992d3bc94879325",
        "name": "Join Messages and Keys",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 520,
        "y": 420,
        "wires": [
            [
                "a0077ceab835bfeb",
                "543376b24c6aa0aa"
            ]
        ]
    },
    {
        "id": "a0077ceab835bfeb",
        "type": "function",
        "z": "7992d3bc94879325",
        "name": "Filter Selected Keys",
        "func": "// Ensure the joined message contains the expected structure\nif (!msg.payload || !msg.payload.messages || !Array.isArray(msg.payload.messages)) {\n    node.error(\"Expected msg.messages to be an array, but it's not.\", msg);\n    return null;\n}\n\n// Retrieve the array of messages from the joined payload\nlet messages = msg.payload.messages;\n\n// Retrieve selected keys from the joined payload\nlet selectedKeys = msg.payload.selectedKeys || {};\n\nlet filteredDataArray = [];\n\n// Iterate over each message and filter based on selected keys\nmessages.forEach(iotMessage => {\n    let filteredData = {};\n    \n    // Iterate over the keys in the selectedKeys object\n    for (let key in selectedKeys) {\n        // If the key was selected (true) and exists in the IoT message, add it to filteredData\n        if (selectedKeys[key] && iotMessage.hasOwnProperty(key)) {\n            filteredData[key] = iotMessage[key];\n        }\n    }\n    \n    // If filteredData has content, add it to the filteredDataArray\n    if (Object.keys(filteredData).length > 0) {\n        filteredDataArray.push(filteredData);\n    }\n});\n\n// Convert the filtered data to CSV format\nconst csvHeaders = Object.keys(filteredDataArray[0]).join(',');\nconst csvRows = filteredDataArray.map(row => Object.values(row).join(','));\nconst csvContent = [csvHeaders, ...csvRows].join('\\n');\n\n// Store the CSV content in the flow context for later use\nflow.set('csvContent', csvContent);\n\nmsg.payload = \"Data has been filtered and saved for download.\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 360,
        "wires": [
            [
                "17b1523fd0ac1f7a"
            ]
        ]
    },
    {
        "id": "17b1523fd0ac1f7a",
        "type": "debug",
        "z": "7992d3bc94879325",
        "name": "Filtered Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 600,
        "wires": []
    },
    {
        "id": "93a063d77579e712",
        "type": "debug",
        "z": "7992d3bc94879325",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 60,
        "wires": []
    },
    {
        "id": "7a4dfe4ae6467135",
        "type": "debug",
        "z": "7992d3bc94879325",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 720,
        "wires": []
    },
    {
        "id": "543376b24c6aa0aa",
        "type": "debug",
        "z": "7992d3bc94879325",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 440,
        "wires": []
    },
    {
        "id": "e2c4a782d72740c7",
        "type": "ui_form",
        "z": "7992d3bc94879325",
        "name": "Select Keys",
        "label": "Select Keys to Filter",
        "group": "a5570bfaa20b5bb0",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Job ID",
                "value": "jobId",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "Status",
                "value": "status",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "Queue Name",
                "value": "queueName",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "Remill Count",
                "value": "remillCount",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "Time",
                "value": "time",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "Flag",
                "value": "flag",
                "type": "checkbox",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "jobId": false,
            "status": false,
            "queueName": false,
            "remillCount": false,
            "time": false,
            "flag": false
        },
        "submit": "Yes",
        "cancel": "",
        "topic": "",
        "topicType": "str",
        "splitLayout": false,
        "x": 450,
        "y": 620,
        "wires": [
            [
                "722de693c9ff157a"
            ]
        ]
    },
    {
        "id": "8683d9b8d2b3d50c",
        "type": "mqtt in",
        "z": "7992d3bc94879325",
        "name": "",
        "topic": "Cloudpoint/Updates",
        "qos": "1",
        "datatype": "json",
        "broker": "mqtt_broker",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 240,
        "wires": [
            [
                "c7d424b7c80c4342"
            ]
        ]
    },
    {
        "id": "a5570bfaa20b5bb0",
        "type": "ui_group",
        "name": "NodeRED",
        "tab": "11cf8f51cad5759e",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "NodeRED Client",
        "broker": "a25z0fjr8cb2t-ats.iot.us-east-1.amazonaws.com",
        "port": "8883",
        "tls": "698979b26b42b5ba",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "11cf8f51cad5759e",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "698979b26b42b5ba",
        "type": "tls-config",
        "name": "TLS - MQTT",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "certificate.pem.crt",
        "keyname": "private.pem.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    }
]